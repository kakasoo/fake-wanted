/**
 * @packageDocumentation
 * @module api.functional.wanted
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IWanted } from "../../structures/watned/IWanted";

/**
 * Wanted is a site that collects employment
 * information in Korea. This API exists to search
 * for companies. You can search for companies by
 * calling this API, and companies that match the
 * query delivered by the factor will come out in
 * order of similarity. You may want to call this
 * function first to see additional information
 * about the company.
 *
 * @param input Search company parameters in `Wanted`
 * @summary Search Companies
 * @returns Companies matched inqueries
 *
 * @controller WantedController.search
 * @path GET /wanted
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function search(
  connection: IConnection,
  input: IWanted.ISearchInput,
): Promise<search.Output> {
  return !!connection.simulate
    ? search.simulate(connection, input)
    : PlainFetcher.fetch(connection, {
        ...search.METADATA,
        template: search.METADATA.path,
        path: search.path(input),
      });
}
export namespace search {
  export type Query = IWanted.ISearchInput;
  export type Output = IWanted.ISearchOutput;

  export const METADATA = {
    method: "GET",
    path: "/wanted",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (input: search.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(input as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/wanted";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IWanted.ISearchOutput => typia.random<IWanted.ISearchOutput>(g);
  export const simulate = (
    connection: IConnection,
    input: IWanted.ISearchInput,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(input),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
