/**
 * @packageDocumentation
 * @module api.functional.wanted.positions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IPage } from "../../../structures/common/IPage";
import type { IWanted } from "../../../structures/watned/IWanted";

/**
 * The positions of the query are searched.
 * If you put in the technology stack or company name,
 * pass it to the query.
 *
 * @param input Search JD (=Position) parameter in `Wanted`
 * @returns Job Descriptions matched inqueries
 *
 * @controller WantedController.getPosition
 * @path GET /wanted/positions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getPosition(
  connection: IConnection,
  input: IWanted.IGetPositionInput,
): Promise<getPosition.Output> {
  return !!connection.simulate
    ? getPosition.simulate(connection, input)
    : PlainFetcher.fetch(connection, {
        ...getPosition.METADATA,
        template: getPosition.METADATA.path,
        path: getPosition.path(input),
      });
}
export namespace getPosition {
  export type Query = IWanted.IGetPositionInput;
  export type Output = IPage<IWanted.Position>;

  export const METADATA = {
    method: "GET",
    path: "/wanted/positions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (input: getPosition.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(input as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/wanted/positions";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPage<IWanted.Position> => typia.random<IPage<IWanted.Position>>(g);
  export const simulate = (
    connection: IConnection,
    input: IWanted.IGetPositionInput,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(input),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
