/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IEntity } from "../../structures/common/IEntity";

/**
 * @controller UserController.create
 * @path POST /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(connection: IConnection): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...create.METADATA,
        template: create.METADATA.path,
        path: create.path(),
      });
}
export namespace create {
  export type Output = IEntity;

  export const METADATA = {
    method: "POST",
    path: "/user",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/user";
  export const random = (g?: Partial<typia.IRandomGenerator>): IEntity =>
    typia.random<IEntity>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
